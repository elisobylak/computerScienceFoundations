/**Collaborative effort by Alex, Eli, and Tai*/import java.util.*;public class Permutations {    int n = 0;    int z = 0;    ArrayList<Integer> myList = new ArrayList<Integer>();    ArrayList<ArrayList> permutationList = new ArrayList<Integer>();    ArrayList<Integer> used = new ArrayList<Integer>();                public Permutations() {        Scanner scan = new Scanner(System.in);        System.out.println("What would you like your size of integers to be?");        n = scan.nextInt();    }        public void fillList() {        for(int i =0; i<=n; i++) {            this.myList.add(i);            this.myList.        }    }        public void calculatePossibilities() {        for (int i =n; i>= 0; i--) {            z = z*n;        }    }                    public void createPermutations(ArrayList<Integer> myList,ArrayList<Integer> used  ) {        Random rn = new Random();        int index;        for(int o=0; o<=z; o++) {            String permutated = "";            for(int i=0; i<=n; i++) {                index = rn.nextInt(n) + 1;                int toAdd = myList.get(index);                        }        }    }                                        }        }Reflection:In this week’s lab the subgroup I was in focused on the permutations problem for this lab. A lot of the structure of this code was fairly straight forward to put together. But the part that took us the most time was figuring out how to make this a recursive program. I think we are all new-ish to recursion and are not 100% comfortable making functions that call themselves. 